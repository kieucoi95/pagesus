<?php

use Drupal\taxonomy\Entity\Term;
use \Drupal\block_content\BlockContentInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;

/**
 * @file
 * Functions to support theming in the pegasus theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function pegasus_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}
/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function pegasus_preprocess(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
  $variables['logo'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
}

/**
 * Implements hook_page_attachments_alter().
 */
function pegasus_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function pegasus_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function pegasus_theme_suggestions_page_alter(array &$suggestions, array &$variables) {
  $path_args = explode('/', trim(\Drupal::service('path.current')->getPath(), '/'));
  $suggestions = theme_get_suggestions($path_args, 'page');
  $http_error_suggestions = [
      'system.401' => 'page__401',
      'system.403' => 'page__403',
      'system.404' => 'page__404',
  ];
  $route_name = \Drupal::routeMatch()->getRouteName();

  if ($route_name == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $term = Term::load($tid);
      $variables['term_id'] = $tid;
      $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
  }

  if (isset($http_error_suggestions[$route_name])) {
      $suggestions[] = $http_error_suggestions[$route_name];
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_block_alter() to add classes to the search form.
 */
function pegasus_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function pegasus_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function pegasus_preprocess_block(array &$variables) {

  $variables['base_path'] = base_path();
  $content = $variables['elements']['content'];

  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $blockType = $content['#block_content']->bundle();

    // Home banner
    if ($blockType === 'home_reviews') {
      $variables['items'] = [];
      foreach ($content['field_rivews'] as $key => $value) {
        if (is_numeric($key)) {
          $name = $value['#paragraph']->field_name->getValue()[0]['value'];
          $rating = $value['#paragraph']->field_rating->getValue()[0]['value'];
          $description = $value['#paragraph']->field_description->getValue()[0]['value'];
          $img_id = $value['#paragraph']->field_image->getValue()[0]['target_id'];
          $img_id = File::load($img_id);
          $img_uri = $img_id->getFileUri();
          $variables['items'][] = [
            'name' => $name,
            'rating' => $rating,
            'description' => $description,
            'img' => $img_uri
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function pegasus_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function pegasus_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function pegasus_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
  $variables['shopee_affiliate'] = \Drupal::config('crawl_shopee.settings')->get('shopee_affiliate');
}
/**
 * Implements hook_preprocess_node().
 */
function pegasus_preprocess_views_view(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
    $variables['base_path'] = base_path();
    $view = $variables['view'];
    $id = $view->id();
    $name = $variables['display_id'];

    if ($name == 'block_1' && $id == 'product') {
        
        $variables['items'] = [];
        $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();
        foreach ($view->result as $key => $result){
            $nid = $result->_entity->nid->value;
            $node = Node::load($nid);
            $trans = $node->getTranslation($langCode);
            $facebook = '';
            $appStore = '';
            $googlePlay = '';

            // TITLE
            if (!empty($result->_entity->title)) {
                if ($node->hasTranslation($langCode)) {
                    $title = $trans->getTitle();
                }
            } else {
                $title = '';
            }

            // IMG
            if (!empty($result->_entity->field_banner)) {
                $uri = \Drupal\file\Entity\File::load($result->_entity->field_banner[0]->target_id)->uri->value;
                $alt = $result->_entity->field_banner[0]->alt;
            } else {
                $uri = '';
                $alt = '';
            }

            // Facebook
            if (!empty($result->_entity->field_facebook)) {
                $facebook = $trans->field_facebook->value;
            }
            
            // App Store
            if (!empty($result->_entity->field_app_store)) {
                $appStore = $trans->field_app_store->value;
            }

            // Google Play
            if (!empty($result->_entity->field_google_play)) {
                $googlePlay = $trans->field_google_play->value;
            }

            // Link
            $link = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();

            $variables['items'][] = [
                'alt' => $alt,
                'uri' => $uri,
                'title' => $title,
                'facebook' => $facebook,
                'appStore' => $appStore,
                'googlePlay' => $googlePlay,
                'link' => $link
            ];

        }
    }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function pegasus_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function pegasus_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function pegasus_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function pegasus_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function pegasus_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function pegasus_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function pegasus_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}